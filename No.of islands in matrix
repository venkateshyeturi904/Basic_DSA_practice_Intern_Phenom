/*
Given a matrix of 1s and 0s, return the number of "islands" in the matrix. A 1 represents land and 0 represents water, so an island is a group of 1s that are neighboring whose perimeter is surrounded by water.

For example, this matrix has 4 islands.

1 0 0 0 0
0 0 1 1 0
0 1 1 0 0
0 0 0 0 0
1 1 0 0 1
1 1 0 0 1
*/

public class HelloWorld{

     public static void main(String []args){
        
        int M[][] = {{1,0,0,0,0},{0,0,1,1,0},{0,1,1,0,0},{0,0,0,0,0},{1,1,0,0,1},{1,1,0,0,1}};
        
        System.out.println(count(M));
        
     }
     
     public static int count(int [][] M){
         
         int row = M.length;
         int col = M[0].length;
         int count =0;
         
         for(int i=0;i<row;i++){
             for(int j=0;j<col;j++){
                 if(M[i][j]==1){
                     
                     count++;
                     
                     traverse(M,i-1,j-1,row,col);
                     traverse(M,i-1,j,row,col);
                     traverse(M,i-1,j+1,row,col);
                     traverse(M,i,j+1,row,col);
                     traverse(M,i+1,j+1,row,col);
                     traverse(M,i+1,j,row,col);
                     traverse(M,i+1,j-1,row,col);
                     traverse(M,i,j-1,row,col);
                     
                     
                 }
             }
         }
         
         return count;
         
     }
     public static void traverse(int [][] M,int i,int j,int row,int col){
         
         if(i<0 || j<0 || i>row-1 || j>col-1 || M[i][j]!=1){
             return;
         }
         
         if(M[i][j]==1){
             M[i][j]=0;
             traverse(M,i-1,j-1,row,col);
             traverse(M,i-1,j,row,col);
             traverse(M,i-1,j+1,row,col);
             traverse(M,i,j+1,row,col);
             traverse(M,i+1,j+1,row,col);
             traverse(M,i+1,j,row,col);
             traverse(M,i+1,j-1,row,col);
             traverse(M,i,j-1,row,col);
         }
         
         
         
         
     }
     
     
     
     
     
     
     
}
