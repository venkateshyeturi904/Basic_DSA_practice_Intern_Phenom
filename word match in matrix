/*
Given a 2D board of characters and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

For example, given the following board:

[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]
exists(board, "ABCCED") returns true, exists(board, "SEE") returns true, exists(board, "ABCB") returns false.
*/

package practice;

public class WordMatching {
    public static boolean [][] visited;
    public static void main(String args[]){
        char[][] board  = {{'A','B','C','E'},{'S','F','C','S'},{'A','D','E','E'}};
        String s = "ABCCES";
        System.out.println(exists(board,s));
    }
    public static boolean exists(char[][] board, String s){

        for(int i=0;i<board.length;i++){
            visited=new boolean[board.length][board[0].length];
            for(int j=0;j<board[0].length;j++){
                if(board[i][j]==s.charAt(0)&&traverse(board,s,i,j,0)){
                    return true;
                }
            }
        }
        return false;
    }
    private static boolean traverse(char[][] board, String s, int i, int j, int index){
        if(index==s.length()){
            return true;
        }
        char c = s.charAt(index);
        if( i<0 || j<0 || i>=board.length || j>=board[0].length || visited[i][j]||board[i][j]!=s.charAt(index)  ){
            return false;
        }
        visited[i][j]=true;

            if (traverse(board, s, i + 1, j, index + 1) || traverse(board, s, i, j + 1, index + 1) || traverse(board, s, i - 1, j, index + 1) || traverse(board, s, i, j - 1, index + 1)) {
                return true;
            }

        visited[i][j]=false;
        return false;
    }
}

